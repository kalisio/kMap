{"version":3,"sources":["../../../src/client/mixins/mixin.geojson-layers.js"],"names":["geojsonLayersMixin","methods","addGeoJson","geojson","name","geojsonOptions","addLayer","geoJson","getGeoJsonOptions","addGeoJsonCluster","cluster","markerClusterGroup","createMarkerFromStyle","latlng","markerStyle","icon","type","options","marker","onEachFeature","feature","layer","featureStyle","configuration","getFeaturePopup","bindPopup","properties","borderStyle","html","Object","keys","popup","excludedProperties","filter","includes","property","k","undefined","map","join","maxHeight","maxWidth","getFeatureTooltip","bindTooltip","tooltip","permanent","style","getFeatureStyle","opacity","radius","color","fillOpacity","fillColor","pointToLayer","getPointMarker","pointStyle","set"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAIA,qBAAqB;AACvBC,WAAS;AACPC,cADO,sBACKC,OADL,EACcC,IADd,EACoBC,cADpB,EACoC;AACzC,aAAO,KAAKC,QAAL,CAAc,kBAAEC,OAAF,CAAUJ,OAAV,EAAmBE,kBAAkB,KAAKG,iBAAL,EAArC,CAAd,EAA8EJ,IAA9E,CAAP;AACD,KAHM;AAIPK,qBAJO,6BAIYN,OAJZ,EAIqBC,IAJrB,EAI2BC,cAJ3B,EAI2C;AAChD,UAAIK,UAAU,kBAAEC,kBAAF,EAAd;AACAD,cAAQJ,QAAR,CAAiB,kBAAEC,OAAF,CAAUJ,OAAV,EAAmBE,kBAAkB,KAAKG,iBAAL,EAArC,CAAjB;AACA,aAAO,KAAKF,QAAL,CAAcI,OAAd,EAAuBN,IAAvB,CAAP;AACD,KARM;AASPQ,yBATO,iCASgBC,MAThB,EASwBC,WATxB,EASqC;AAC1C,UAAIA,WAAJ,EAAiB;AACf,YAAIC,OAAOD,YAAYC,IAAvB;AACA;AACA,YAAIA,IAAJ,EAAU;AACRA,iBAAO,kBAAEA,KAAKC,IAAP,EAAaD,KAAKE,OAAlB,CAAP;AACA,iBAAO,kBAAEH,YAAYE,IAAd,EAAoBH,MAApB,EAA4B,EAAEE,UAAF,EAA5B,CAAP;AACD,SAHD,MAGO;AACL,iBAAO,kBAAED,YAAYE,IAAd,EAAoBH,MAApB,EAA4BC,YAAYG,OAAxC,CAAP;AACD;AACF,OATD,MASO;AACL,eAAO,kBAAEC,MAAF,CAASL,MAAT,CAAP;AACD;AACF,KAtBM;AAuBPL,qBAvBO,+BAuBc;AAAA;;AACnB,UAAIH,iBAAiB;AACnBc,uBAAe,uBAACC,OAAD,EAAUC,KAAV,EAAoB;AACjC,cAAMC,eAAe,MAAKC,aAAL,CAAmBD,YAAxC;AACA;AACA,cAAI,OAAO,MAAKE,eAAZ,KAAgC,UAApC,EAAgD;AAC9CH,kBAAMI,SAAN,CAAgB,MAAKD,eAAL,CAAqBJ,OAArB,EAA8BC,KAA9B,CAAhB;AACD,WAFD,MAEO,IAAID,QAAQM,UAAZ,EAAwB;AAC7B;AACA,gBAAMC,cAAc,8DAApB;AACA,gBAAIC,OAAO,WAAWD,WAAX,GAAyB,GAApC;AACAC,oBAAQ,QAAQD,WAAR,GAAsB,MAAtB,GAA+BA,WAA/B,GAA6C,mCAArD;AACA,gBAAID,aAAaG,OAAOC,IAAP,CAAYV,QAAQM,UAApB,CAAjB;AACA;AACA,gBAAIJ,gBAAgBA,aAAaS,KAAjC,EAAwC;AACtC,kBAAIT,aAAaS,KAAb,CAAmBL,UAAvB,EAAmC;AACjCA,6BAAaJ,aAAaS,KAAb,CAAmBL,UAAhC;AACD;AACD,kBAAIJ,aAAaS,KAAb,CAAmBC,kBAAvB,EAA2C;AACzCN,6BAAaA,WAAWO,MAAX,CAAkB;AAAA,yBAAY,CAACX,aAAaS,KAAb,CAAmBC,kBAAnB,CAAsCE,QAAtC,CAA+CC,QAA/C,CAAb;AAAA,iBAAlB,CAAb;AACD;AACF;AACDP,oBAAQF,WACPO,MADO,CACA;AAAA,qBAAKb,QAAQM,UAAR,CAAmBU,CAAnB,MAA0B,IAA1B,IAAkChB,QAAQM,UAAR,CAAmBU,CAAnB,MAA0BC,SAAjE;AAAA,aADA,EAEPC,GAFO,CAEH;AAAA,qBAAK,wEAAwEX,WAAxE,GAAsF,GAAtF,GAA4FS,CAA5F,GAAgG,WAAhG,GAA8GhB,QAAQM,UAAR,CAAmBU,CAAnB,CAA9G,GAAsI,YAA3I;AAAA,aAFG,EAGPG,IAHO,CAGF,EAHE,CAAR;AAIAX,oBAAQ,UAAR;AACA;AACA,gBAAIN,gBAAgBA,aAAaS,KAA7B,IAAsCT,aAAaS,KAAb,CAAmBd,OAA7D,EAAsE;AACpEI,oBAAMI,SAAN,CAAgBG,IAAhB,EAAsBN,aAAaS,KAAb,CAAmBd,OAAzC;AACD,aAFD,MAEO;AACLI,oBAAMI,SAAN,CAAgBG,IAAhB,EAAsB;AACpBY,2BAAW,GADS;AAEpBC,0BAAU;AAFU,eAAtB;AAID;AACF;AACD;AACA,cAAI,OAAO,MAAKC,iBAAZ,KAAkC,UAAtC,EAAkD;AAChDrB,kBAAMsB,WAAN,CAAkB,MAAKD,iBAAL,CAAuBtB,OAAvB,EAAgCC,KAAhC,CAAlB;AACD,WAFD,MAEO,IAAIC,gBAAgBA,aAAasB,OAA7B,IAAwCtB,aAAasB,OAAb,CAAqBT,QAA7D,IAAyEf,QAAQM,UAArF,EAAiG;AACtG,gBAAIkB,UAAUxB,QAAQM,UAAR,CAAmBJ,aAAasB,OAAb,CAAqBT,QAAxC,CAAd;AACA,gBAAIS,OAAJ,EAAa;AACXvB,oBAAMsB,WAAN,CAAkBC,OAAlB,EAA2BtB,aAAasB,OAAb,CAAqB3B,OAArB,IAAgC,EAAE4B,WAAW,IAAb,EAA3D;AACD;AACF;AACF,SA7CkB;AA8CnBC,eAAO,eAAC1B,OAAD,EAAa;AAClB;AACA,cAAI,OAAO,MAAK2B,eAAZ,KAAgC,UAApC,EAAgD;AAC9C,mBAAO,MAAKA,eAAL,CAAqB3B,OAArB,CAAP;AACD,WAFD,MAEO;AACL;AACA,mBAAO,MAAKG,aAAL,CAAmBD,YAAnB,IAAmC;AACxC0B,uBAAS,CAD+B;AAExCC,sBAAQ,CAFgC;AAGxCC,qBAAO,KAHiC;AAIxCC,2BAAa,GAJ2B;AAKxCC,yBAAW;AAL6B,aAA1C;AAOD;AACF,SA5DkB;AA6DnBC,sBAAc,sBAACjC,OAAD,EAAUP,MAAV,EAAqB;AACjC;AACA,cAAI,OAAO,MAAKyC,cAAZ,KAA+B,UAAnC,EAA+C;AAC7C,mBAAO,MAAKA,cAAL,CAAoBlC,OAApB,EAA6BP,MAA7B,CAAP;AACD,WAFD,MAEO;AACL;AACA,mBAAO,MAAKD,qBAAL,CAA2BC,MAA3B,EAAmC,MAAKU,aAAL,CAAmBgC,UAAtD,CAAP;AACD;AACF;AArEkB,OAArB;;AAwEA,aAAOlD,cAAP;AACD;AAjGM;AADc,CAAzB;;AAsGA,cAAMmD,GAAN,CAAU,0BAAV,EAAsCxD,kBAAtC;;kBAEeA,kB","file":"mixin.geojson-layers.js","sourcesContent":["import L from 'leaflet'\r\nimport 'leaflet.markercluster'\r\nimport 'leaflet.markercluster/dist/MarkerCluster.css'\r\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'\r\nimport { Store } from 'kCore/client'\r\n\r\nlet geojsonLayersMixin = {\r\n  methods: {\r\n    addGeoJson (geojson, name, geojsonOptions) {\r\n      return this.addLayer(L.geoJson(geojson, geojsonOptions || this.getGeoJsonOptions()), name)\r\n    },\r\n    addGeoJsonCluster (geojson, name, geojsonOptions) {\r\n      let cluster = L.markerClusterGroup()\r\n      cluster.addLayer(L.geoJson(geojson, geojsonOptions || this.getGeoJsonOptions()))\r\n      return this.addLayer(cluster, name)\r\n    },\r\n    createMarkerFromStyle (latlng, markerStyle) {\r\n      if (markerStyle) {\r\n        let icon = markerStyle.icon\r\n        // Parse icon options to get icon object if any\r\n        if (icon) {\r\n          icon = L[icon.type](icon.options)\r\n          return L[markerStyle.type](latlng, { icon })\r\n        } else {\r\n          return L[markerStyle.type](latlng, markerStyle.options)\r\n        }\r\n      } else {\r\n        return L.marker(latlng)\r\n      }\r\n    },\r\n    getGeoJsonOptions () {\r\n      let geojsonOptions = {\r\n        onEachFeature: (feature, layer) => {\r\n          const featureStyle = this.configuration.featureStyle\r\n          // Custom defined function in component ?\r\n          if (typeof this.getFeaturePopup === 'function') {\r\n            layer.bindPopup(this.getFeaturePopup(feature, layer))\r\n          } else if (feature.properties) {\r\n            // Default content\r\n            const borderStyle = ' style=\"border: 1px solid black; border-collapse: collapse;\"'\r\n            let html = '<table' + borderStyle + '>'\r\n            html += '<tr' + borderStyle + '><th' + borderStyle + '>Property</th><th>Value</th></tr>'\r\n            let properties = Object.keys(feature.properties)\r\n            // Custom list given ?\r\n            if (featureStyle && featureStyle.popup) {\r\n              if (featureStyle.popup.properties) {\r\n                properties = featureStyle.popup.properties\r\n              }\r\n              if (featureStyle.popup.excludedProperties) {\r\n                properties = properties.filter(property => !featureStyle.popup.excludedProperties.includes(property))\r\n              }\r\n            }\r\n            html += properties\r\n            .filter(k => feature.properties[k] !== null && feature.properties[k] !== undefined)\r\n            .map(k => '<tr style=\"border: 1px solid black; border-collapse: collapse;\"><th' + borderStyle + '>' + k + '</th><th>' + feature.properties[k] + '</th></tr>')\r\n            .join('')\r\n            html += '</table>'\r\n            // Configured or default style\r\n            if (featureStyle && featureStyle.popup && featureStyle.popup.options) {\r\n              layer.bindPopup(html, featureStyle.popup.options)\r\n            } else {\r\n              layer.bindPopup(html, {\r\n                maxHeight: 400,\r\n                maxWidth: 400\r\n              })\r\n            }\r\n          }\r\n          // Custom defined function in component ?\r\n          if (typeof this.getFeatureTooltip === 'function') {\r\n            layer.bindTooltip(this.getFeatureTooltip(feature, layer))\r\n          } else if (featureStyle && featureStyle.tooltip && featureStyle.tooltip.property && feature.properties) {\r\n            let tooltip = feature.properties[featureStyle.tooltip.property]\r\n            if (tooltip) {\r\n              layer.bindTooltip(tooltip, featureStyle.tooltip.options || { permanent: true })\r\n            }\r\n          }\r\n        },\r\n        style: (feature) => {\r\n          // Custom defined function in component ?\r\n          if (typeof this.getFeatureStyle === 'function') {\r\n            return this.getFeatureStyle(feature)\r\n          } else {\r\n            // Configured or default style\r\n            return this.configuration.featureStyle || {\r\n              opacity: 1,\r\n              radius: 6,\r\n              color: 'red',\r\n              fillOpacity: 0.5,\r\n              fillColor: 'green'\r\n            }\r\n          }\r\n        },\r\n        pointToLayer: (feature, latlng) => {\r\n          // Custom defined function in component ?\r\n          if (typeof this.getPointMarker === 'function') {\r\n            return this.getPointMarker(feature, latlng)\r\n          } else {\r\n            // Configured or default style\r\n            return this.createMarkerFromStyle(latlng, this.configuration.pointStyle)\r\n          }\r\n        }\r\n      }\r\n\r\n      return geojsonOptions\r\n    }\r\n  }\r\n}\r\n\r\nStore.set('mixins.map.geojsonLayers', geojsonLayersMixin)\r\n\r\nexport default geojsonLayersMixin\r\n"]}