{"version":3,"sources":["../../../src/client/mixins/mixin.base.js"],"names":["Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","baseMixin","methods","setupControls","controls","forEach","control","addTo","map","$emit","center","longitude","latitude","zoomLevel","setView","LatLng","removeLayer","layer","overlayLayersControl","hasLayer","checkOverlayLayersControlVisibility","addLayer","name","visible","options","hasOwnProperty","addOverlay","getContainer","style","visibility","_layers","created","mounted","layers","push","$on","beforeDestroy","remove","set"],"mappings":"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","file":"mixin.base.js","sourcesContent":["import L from 'leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport { Store } from 'kCore/client'\r\n// Fix to make Leaflet assets be correctly inserted by webpack\r\ndelete L.Icon.Default.prototype._getIconUrl\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n})\r\n\r\nlet baseMixin = {\r\n  methods: {\r\n    setupControls () {\r\n      this.controls.forEach(control => control.addTo(this.map))\r\n      this.$emit('controlsReady')\r\n    },\r\n    center (longitude, latitude, zoomLevel) {\r\n      this.map.setView(new L.LatLng(latitude, longitude), zoomLevel || 12)\r\n    },\r\n    removeLayer (layer) {\r\n      if (!layer) return\r\n\r\n      this.overlayLayersControl.removeLayer(layer)\r\n      // If it was visible remove it from map\r\n      if (this.map.hasLayer(layer)) {\r\n        this.map.removeLayer(layer)\r\n      }\r\n      this.checkOverlayLayersControlVisibility()\r\n    },\r\n    addLayer (layer, name) {\r\n      if (layer && !this.map.hasLayer(layer)) {\r\n        // Check if layer is visible by default\r\n        let visible = true\r\n        if (layer.options.hasOwnProperty('visible')) {\r\n          visible = layer.options.visible\r\n        }\r\n        if (visible) {\r\n          this.map.addLayer(layer)\r\n        }\r\n        this.overlayLayersControl.addOverlay(layer, name)\r\n        this.checkOverlayLayersControlVisibility()\r\n      }\r\n      return layer\r\n    },\r\n    checkOverlayLayersControlVisibility () {\r\n      // Hidden while nothing has been loaded, default state\r\n      this.overlayLayersControl.getContainer().style.visibility = 'hidden'\r\n      this.overlayLayersControl._layers.forEach(_ => {\r\n        // We know there is at least one layer to display\r\n        this.overlayLayersControl.getContainer().style.visibility = 'visible'\r\n      })\r\n    }\r\n  },\r\n  created () {\r\n    // This is the right place to declare private members because Vue has already processed observed data\r\n    this.controls = []\r\n  },\r\n  mounted () {\r\n    // Initialize the map now the DOM is ready\r\n    this.map = L.map('map').setView([46, 1.5], 5)\r\n    // Add empty basic overlays control\r\n    this.overlayLayersControl = L.control.layers({}, {})\r\n    this.controls.push(this.overlayLayersControl)\r\n    this.$on('mapReady', _ => {\r\n      this.setupControls()\r\n      this.checkOverlayLayersControlVisibility()\r\n    })\r\n  },\r\n  beforeDestroy () {\r\n    this.map.remove()\r\n  }\r\n}\r\n\r\nStore.set('mixins.map.base', baseMixin)\r\n\r\nexport default baseMixin\r\n"]}